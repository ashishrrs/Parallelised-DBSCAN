        -:    0:Source:serial.c
        -:    0:Graph:serial.gcno
        -:    0:Data:serial.gcda
        -:    0:Runs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include<math.h>
        -:    4:
        -:    5:double ep;
        -:    6:double pts[1000][50];
        -:    7:int clusters[1000][1000];
        -:    8:int siz[1000];
        -:    9:int minpts,dim,num_pts;
        -:   10:int vis[100000] = {0};
        -:   11:
function sqrd_dist called 1378 returned 100% blocks executed 100%
     1378:   12:double sqrd_dist(int i,int j)
        -:   13:{
     1378:   14:    double sum = 0;
     5512:   15:    for(int k = 0; k < dim ; k++)
     1378:   15-block  0
     5512:   15-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   16:    {
     4134:   17:        sum += pow(pts[i][k] - pts[j][k],2);
     4134:   17-block  0
        -:   18:    }
     1378:   19:    return sqrt(sum);
     1378:   19-block  0
        -:   20:}
        -:   21:
        -:   22:
function is_core_node called 0 returned 0% blocks executed 0%
    #####:   23:int is_core_node(int i)
        -:   24:{
    #####:   25:    if(siz[i] >= minpts-1 )
    %%%%%:   25-block  0
branch  0 never executed
branch  1 never executed
    #####:   26:        return 1;
    %%%%%:   26-block  0
    #####:   27:    return 0;
    %%%%%:   27-block  0
        -:   28:}
        -:   29:
        -:   30:
function get_neighbours called 1 returned 100% blocks executed 92%
        1:   31:void get_neighbours()
        -:   32:{
       53:   33:    for(int i = 0; i+1 < num_pts; i++)
        1:   33-block  0
       52:   33-block  1
       53:   33-block  2
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   34:    {
     1430:   35:        for(int j = i+1; j < num_pts; j++)
       52:   35-block  0
     1378:   35-block  1
     1430:   35-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   36:        {
     1378:   37:            if(i == j)
     1378:   37-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   38:            continue;
    %%%%%:   38-block  0
     1378:   39:            if(sqrd_dist(i,j) <= ep)
     1378:   39-block  0
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        -:   40:            {
       52:   41:                clusters[i][siz[i]] = j;
       52:   42:                clusters[j][siz[j]] = i;
       52:   43:                siz[i]++;
       52:   44:                siz[j]++;
       52:   44-block  0
        -:   45:            }
        -:   46:        }
        -:   47:    }
        1:   48:}
function dfs called 52 returned 100% blocks executed 100%
       52:   49:void dfs(int i)
        -:   50:{
       52:   51:    vis[i] = 1;
       52:   52:    printf("%d ",i+1);
       52:   52-block  0
call    0 returned 100%
      156:   53:    for(int a  = 0; a < siz[i] ; a++)
      104:   53-block  0
      156:   53-block  1
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   54:    {
      104:   55:        if(vis[clusters[i][a]] != 1)
      104:   55-block  0
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
       48:   56:            dfs(clusters[i][a]);
       48:   56-block  0
call    0 returned 100%
        -:   57:    }
       52:   58:}
function dbscan called 1 returned 100% blocks executed 100%
        1:   59:void dbscan()
        -:   60:{
        1:   61:    get_neighbours();
        1:   61-block  0
call    0 returned 100%
        -:   62:
        1:   63:    int cnt = 0;
       54:   64:    for(int i = 0; i < num_pts; i++)
       53:   64-block  0
       54:   64-block  1
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   65:    {
       53:   66:        if(vis[i] != 1 && siz[i] >= minpts)
       53:   66-block  0
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
       10:   66-block  1
branch  2 taken 40% (fallthrough)
branch  3 taken 60%
        -:   67:        {
        4:   68:            cnt++;
        4:   69:            printf("cluster %d : ",cnt);
        4:   69-block  0
call    0 returned 100%
        4:   70:            dfs(i); 
call    0 returned 100%
        4:   71:            printf("\n");
call    0 returned 100%
        -:   72:        }
        -:   73:
        -:   74:    }
        1:   75:    printf("NOISE :");
        1:   75-block  0
call    0 returned 100%
       54:   76:    for(int i = 0; i < num_pts; i++)
       53:   76-block  0
       54:   76-block  1
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   77:    {
       53:   78:        if(vis[i] != 1)
       53:   78-block  0
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        1:   79:            printf("%d ",i+1);
        1:   79-block  0
call    0 returned 100%
        -:   80:            
        -:   81:    }
        1:   82:}
        -:   83:
        -:   84:
        -:   85:
function main called 1 returned 100% blocks executed 74%
        1:   86:int main()
        -:   87:{
        1:   88:    printf("Enter the ep distance:");
        1:   88-block  0
call    0 returned 100%
        1:   89:    scanf("%lf",&ep);
call    0 returned 100%
        1:   90:    if(ep < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   91:    {
    #####:   92:        printf("INVALID EPSILON DISTANCE");
    %%%%%:   92-block  0
call    0 never executed
    #####:   93:        return 0;
        -:   94:    }
        1:   95:    printf("Enter the minimum points:");
        1:   95-block  0
call    0 returned 100%
        1:   96:    scanf("%d",&minpts);
call    0 returned 100%
        1:   97:    if(minpts < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   98:    {
    #####:   99:        printf("INVALID MIN PTS");
    %%%%%:   99-block  0
call    0 never executed
    #####:  100:        return 0;
        -:  101:    }
        1:  102:    printf("Enter the dimesions of the points:");
        1:  102-block  0
call    0 returned 100%
        1:  103:    scanf("%d",&dim);
call    0 returned 100%
        1:  104:    if(dim < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  105:    {
    #####:  106:        printf("INVALID DIMENSIONS");
    %%%%%:  106-block  0
call    0 never executed
    #####:  107:        return 0;
        -:  108:    }
        1:  109:    printf("Enter the number of points:");
        1:  109-block  0
call    0 returned 100%
        1:  110:    scanf("%d",&num_pts);
call    0 returned 100%
        1:  111:    if(num_pts < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  112:    {
    #####:  113:        printf("INVALID NUMBER OF PTS");
    %%%%%:  113-block  0
call    0 never executed
    #####:  114:        return 0;
        -:  115:    }
        1:  116:    printf("Enter points:");
        1:  116-block  0
call    0 returned 100%
       54:  117:    for(int i = 0 ; i < num_pts; i++)
       53:  117-block  0
       54:  117-block  1
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:  118:    {
      212:  119:        for(int j = 0; j < dim; j++)
       53:  119-block  0
      212:  119-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  120:        {
      159:  121:            scanf("%lf",&pts[i][j]);
      159:  121-block  0
call    0 returned 100%
        -:  122:        }
        -:  123:    }
        1:  124:    dbscan();
        1:  124-block  0
call    0 returned 100%
        1:  125:    return 0;
        -:  126:}
